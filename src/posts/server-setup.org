#+TITLE: Server Setup for wmedrano.dev
#+AUTHOR: Will S. Medrano
#+DATE: [2024-06-04 Tue]

* Overview
:PROPERTIES:
:CUSTOM_ID: Overview-cmscxg30z7k0
:END:

The ~oddtaxi~ Raspberry Pi 4 machine is the main entry point to
[[https://www.wmedrano.dev][wmedrano.dev]]. Requests from port ~80~ (http) and ~443~ (https) are
intercepted by Caddy to either:

- Serve a static file.
- Reroute request to another job.

** Data Flow
   :PROPERTIES:
   :CUSTOM_ID: OverviewDataFlow-8074oxm0y7k0
   :END:

Lines represent data flow. Dotted lines represent data flow for
monitoring.

#+BEGIN_SRC dot :file oddtaxi.png
digraph oddtaxi {
  node[shape=record];
  subgraph cluster_1 {
    label="oddtaxi"
    prometheus[label="prometheus\n(metric collector)"];
    grafana[label="grafana\n(prometheus frontend)"];
    caddy[label="caddy\n(web server)"];
    blog[label="blog\n(static files)"];
  }
  blog -> caddy -> public_internet;
  prometheus -> grafana -> caddy;
  grafana -> prometheus[style=dashed];
  prometheus -> prometheus[style=dashed];
  caddy -> prometheus[style=dashed];
}
#+END_SRC

#+RESULTS:
[[file:oddtaxi.png]]

* Prometheus
:PROPERTIES:
:CUSTOM_ID: Prometheus-5uqk8240z7k0
:END:

Prometheus collects  metrics from supported jobs. For example, Prometheus-node
will export metrics at ~http://localhost:9090/metrics~. Prometheus is
installed with ~sudo apt install prometheus~. Installing also
automatically enables the Prometheus daemon; the status can be checked
with ~systemctl status prometheus~.

** Config
:PROPERTIES:
:CUSTOM_ID: PrometheusConfig-d835l060z7k0
:END:

The Prometheus config is stored at ~/etc/prometheus/prometheus.yml~.

#+BEGIN_SRC yaml :file /etc/prometheus/prometheus.yml :tangle yes
  global:
    # Set the scrape interval to every 15 seconds. Default is every 1 minute.
    scrape_interval:     15s
    # Evaluate rules every 15 seconds. The default is every 1 minute.
    evaluation_interval: 15s
    external_labels:
        monitor: 'oddtaxi'
  alerting:
    alertmanagers:
    - static_configs:
      - targets: ['localhost:9093']
#+END_SRC

The jobs that are scraped are specified under ~scrape_configs~. By
default, Prometheus can monitor itself and the
machine. ~prometheus-node-exporter~ captures machine information like
the CPU, Memory, and Disk IO usage. ~prometheus-node-exporter~ is
automatically installed with ~Prometheus~.

#+BEGIN_SRC yaml :file /etc/prometheus/prometheus.yml :tangle yes
  scrape_configs:
    - job_name: prometheus
      static_configs:
        - targets: ['localhost:9090']
    - job_name: node
      static_configs:
        - targets: ['localhost:9100']
#+END_SRC

* Caddy
:PROPERTIES:
:CUSTOM_ID: Caddy-jsggsi30z7k0
:END:

Caddy is install through ~sudo apt install caddy~. After installation,
Caddy should automatically be started as a daemon that reads the
config from /etc/caddy/Caddyfile. The logs and status of the daemon
can be inspected with ~systemctl status caddy~.

** Static Files
:PROPERTIES:
:CUSTOM_ID: CaddyStaticFiles-1gjhaj30z7k0
:END:

Static files are accessed from wmedrano.dev and
www.wmedrano.dev. Caddy acts as a simple fileserver in this case.

#+BEGIN_SRC caddyfile :file /etc/caddy/Caddyfile :tangle yes
  # Static files
  wmedrano.dev {
          root * /home/hiroshi/wmedrano.dev/src
          file_server
  }
  www.wmedrano.dev {
          root * /home/hiroshi/wmedrano.dev/src
          file_server
  }
#+END_SRC

** Prometheus
:PROPERTIES:
:CUSTOM_ID: CaddyPrometheus-mzghaj30z7k0
:END:

Caddy is configured to export Prometheus metrics. We serve the metrics
endpoint at ~21894~. Within the server, we can run ~curl
http://localhost:21894~ to inspect the available metrics.

#+BEGIN_SRC caddyfile :file /etc/caddy/Caddyfile :tangle yes
  # Serve Caddy prometheus metrics through localhost:21894.
  :21894 {
          metrics
  }
#+END_SRC

Once the metrics are exported, they can be collected by Prometheus.

#+BEGIN_SRC yaml :file /etc/prometheus/prometheus.yml :tangle yes
    - job_name: caddy
      static_configs:
        - targets: ['localhost:21894']
#+END_SRC

* Grafana
:PROPERTIES:
:CUSTOM_ID: Grafana-t3jfnl30z7k0
:END:

file:server-setup/grafana.png

** Installation
:PROPERTIES:
:CUSTOM_ID: GrafanaInstallation-1su8bq30z7k0
:END:

Grafana is a UI for Prometheus. Since there is no system package
available, we use Docker to run a prepackaged image. Grafana is served
at ~http://localhost:21895~.

#+BEGIN_SRC sh
sudo docker run -d \
  --name=grafana \
  -p 21895:3000 \
  --restart unless-stopped \
  grafana/grafana-enterprise
#+END_SRC

** Caddy
:PROPERTIES:
:CUSTOM_ID: GrafanaCaddy-d4y8bq30z7k0
:END:

Grafana is exposed through ~status.wmedrano.dev~ in the Caddy
config. ~status.wmedrano.dev~ itself is password protected by
Grafana. The initial admin account is set up on the initial visit.

#+BEGIN_SRC caddyfile :file /etc/caddy/Caddyfile :tangle yes
  # Grafana
  status.wmedrano.dev {
          reverse_proxy localhost:21895
  }
#+END_SRC

** Prometheus
:PROPERTIES:
:CUSTOM_ID: GrafanaPrometheus-e4kdhr30z7k0
:END:

Grafana is a GUI for Prometheus, which itself can be monitored by
Prometheus.

#+BEGIN_SRC yaml :file /etc/prometheus/prometheus.yml :tangle yes
    - job_name: grafana
      static_configs:
        - targets: ['localhost:21895']
#+END_SRC
